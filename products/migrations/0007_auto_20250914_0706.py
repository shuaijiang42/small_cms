# Generated by Django 4.2 on 2025-09-14 07:06

from django.db import migrations
from products.models import Product, NutritionalInformation, ProductNutritionalValue

DATA = [
    {
      "code": "P001",
      "name": "Perfect Fries",
      "description": "The famous French fries you have heard so much about are the best, the most crispy, the ones with the most flavor, if you try them you will understand the reason for their fame.",
      "is_active": True,
      "nutritional_values": [
        {
          "nutritional_info": {
            "name": "Weight",
            "unit": "g"
          },
          "value": 159.00
        },
        {
          "nutritional_info": {
            "name": "Energetic value",
            "unit": "Kcal"
          },
          "value": 389.60
        },
        {
          "nutritional_info": {
            "name": "Proteins",
            "unit": "g"
          },
          "value": 5.40
        },
        {
          "nutritional_info": {
            "name": "Carbohydrates",
            "unit": "g"
          },
          "value": 102.10
        }
      ]
    },
    {
      "code": "P002",
      "name": "Big Mag",
      "description": "Big Mag will always be our number one. Succulent grilled beef of excellent quality, fresh tomato and lettuce, soft onion and tasty pickles accompanied with mayonnaise and ketchup. Do not forget the soft bread with seeds, which together make a hamburger with a unique flavor and which you would recognize with your eyes closed.",
      "is_active": True,
      "nutritional_values": [
        {
          "nutritional_info": {
            "name": "Weight",
            "unit": "g"
          },
          "value": 278.60
        },
        {
          "nutritional_info": {
            "name": "Energetic value",
            "unit": "Kcal"
          },
          "value": 640.30
        },
        {
          "nutritional_info": {
            "name": "Proteins",
            "unit": "g"
          },
          "value": 26.70
        },
        {
          "nutritional_info": {
            "name": "Carbohydrates",
            "unit": "g"
          },
          "value": 51.30
        },
        {
          "nutritional_info": {
            "name": "Salt",
            "unit": "mg"
          },
          "value": 2321.00
        }
      ]
    },
    {
      "code": "P003",
      "name": "Nuka-Cola",
      "description": "The perfect complement to all meals, enjoy the authentic taste of Nuka-Cola.",
      "is_active": False,
      "nutritional_values": [
        {
          "nutritional_info": {
            "name": "Weight",
            "unit": "g"
          },
          "value": 500.00
        },
        {
          "nutritional_info": {
            "name": "Energetic value",
            "unit": "Kcal"
          },
          "value": 210.00
        },
        {
          "nutritional_info": {
            "name": "Carbohydrates",
            "unit": "g"
          },
          "value": 53.00
        },
        {
          "nutritional_info": {
            "name": "Sugar",
            "unit": "g"
          },
          "value": 53.00
        }
      ]
    }
  ]

def load_products(apps, schema_editor):
    for product_data in DATA:
        try:
            # Create or get the Product object
            product_obj, created = Product.objects.update_or_create(
                code=product_data['code'],
                defaults={
                    'name': product_data['name'],
                    'description': product_data['description'],
                    'is_active': product_data['is_active']
                }
            )
            
            # Loop through the nutritional values
            for nutritional_value_data in product_data["nutritional_values"]:
                info_data = nutritional_value_data["nutritional_info"]
                
                # Create or get the NutritionalInformation object
                nutritional_info_obj, created = NutritionalInformation.objects.update_or_create(
                    name=info_data['name'],
                    defaults={'unit': info_data['unit']}
                )
                # Create the ProductNutritionalValue object
                # Use the correct variables here
                product_nutritional_value_obj, created = ProductNutritionalValue.objects.update_or_create(
                    product=product_obj,
                    nutritional_info=nutritional_info_obj,
                    defaults={'value': nutritional_value_data['value']}
                )

        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            continue


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(load_products),
    ]
